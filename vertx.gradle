buildscript {
    repositories {
        maven { url 'https://repo.spring.io/plugins-snapshot' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
        classpath "gradle.plugin.com.github.mtatheonly:quasar-gradle-plugin:0.0.1"
    }
}


def defaultArchiveName = "$project.name-$project.version-fat.jar"

def archiveName = "${->project.ext.has('customArchiveName') ? project.ext.customArchiveName : defaultArchiveName }"

// ao usar apply from: deve se aplicar o plugin a partir do nome da Classe ao invÃ©s do id
// REFERENCIA: http://mrhaki.blogspot.com.br/2015/10/gradle-goodness-apply-external-script.html
apply plugin: com.github.jengelman.gradle.plugins.shadow.ShadowPlugin

apply plugin: 'java'

apply plugin: 'application'
mainClassName="${-> project.ext.has('vertxLauncher') ? project.ext.vertxLauncher :  'io.vertx.core.Launcher'}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'

run {
    args = [
            'run',
            project.mainVerticleName,
            "-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory",
            "-Dvertx.metrics.options.enabled=true",
            "-Dvertx.metrics.options.registryName=$project.name-metrics",
            "--redeploy=$watchForChange",
            "--launcher-class=$mainClassName",
            "--on-redeploy=$doOnChange"
    ]
}

dependencies {
    afterEvaluate {
        compile group: 'io.vertx', name: 'vertx-web', version: "$project.ext.vertxVersion"
        compile group: 'io.vertx', name: 'vertx-core', version: "$project.ext.vertxVersion"
        compile group: 'io.vertx', name: 'vertx-dropwizard-metrics', version: "$project.ext.vertxVersion"
        
        compile "io.vertx:vertx-service-proxy:$project.ext.vertxVersion:processor"
        compileOnly "io.vertx:vertx-codegen:$project.ext.vertxVersion:processor"

        compile group: 'io.dropwizard.metrics', name: 'metrics-jvm', version: '3.1.0'

        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
        compile group: 'io.prometheus', name: 'client', version: '0.0.10'
        compile group: 'io.prometheus', name: 'simpleclient_vertx', version: '0.0.23'
        compile group: 'io.prometheus', name: 'simpleclient_dropwizard', version: '0.0.23'

    }
}

shadowJar {
    afterEvaluate {
        append 'META-INF/services/io.vertx.core.spi.VerticleFactory'
        classifier = 'fat'
        manifest {
            attributes "Main-Verticle": project.mainVerticleName
            attributes "Main-Class": project.mainClassName
        }
        mergeServiceFiles {
            include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
        }

    }
}

// VERT.X SERVICE PROXIES GENERATION
def generateSrcPath = "$buildDir/generated-src"
def generatedSrcDir = file("$buildDir/generated-src")

ext.generateVertxProxiesServices = false

sourceSets {
    main {
        java {
            srcDirs += generatedSrcDir
        }
        output.dir(builtBy: 'generateProxies', generateSrcPath)
    }
}


task generateProxies(type: JavaCompile, group: 'build',
        description: 'Generates the Vertx proxies') {
     afterEvaluate {
         if (project.ext.generateVertxProxiesServices) {
            source = sourceSets.main.java // input source set
            classpath = configurations.compile + configurations.compileOnly // add processor module to classpath
            // specify javac arguments
            options.debugOptions.debugLevel = "source,lines,vars"
            options.compilerArgs = [
                    "-proc:only",
                    "-processor", "io.vertx.codegen.CodeGenProcessor", // vertx processor here
                    "-Acodegen.output=$generateSrcPath"
            ]
            options.annotationProcessorPath = configurations.compileOnly
            // specify output of generated code
            destinationDir = generatedSrcDir
        }
    }
}


compileJava {
    targetCompatibility = 1.8
    sourceCompatibility = 1.8
    dependsOn(generateProxies)
    // options.compilerArgs = [
    //         "-Acodegen.output={$projectDir}/src/main"
    // ]
}
